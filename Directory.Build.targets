<?xml version="1.0" encoding="utf-8" ?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <Import Condition="'$(IsMSBuildFileImported)' != 'true'" Project="$([MSBuild]::GetPathOfFileAbove(.msbuild))" />
  <Import Condition="'$(IsTeronisDotNetCorePropsFileImported)' != 'true'" Project="$(RootCorePropsPath)" />
  <Import Project="$(TeronisMSBuildPackagingProjectBuildInPackageTargetsFile)" />
  <Import Project="$(TeronisMSBuildPackagingPackTargetsFile)" Condition="Exists($(TeronisMSBuildPackagingPackTargetsFile))" />

  <!--
  ModuleInitializerAssemblyLoader
  -->

  <Import Project="$(TeronisModuleInitializerAssemblyLoaderExecutableTargetsFile)" Condition="Exists($(TeronisModuleInitializerAssemblyLoaderExecutableTargetsFile))" />
  <Import Project="$(TeronisModuleInitializerAssemblyLoaderMSBuildTargetsFile)" />

  <!--
  GitVersionCache
  -->

  <Import Project="$(TeronisMSBuildPackagingGitVersionCachePropsFile)" 
    Condition="Exists('$(TeronisMSBuildPackagingGitVersionCachePropsFile)')
      And '$(IsGitVersionCacheRelated)' != 'true'
      And '$(DisableGitVersionCache)' != 'true'" />

  <!-- This gets overriden if below import exists. -->
  <Target Name="GetVersionCache" />

  <Import Project="$(TeronisMSBuildPackagingGitVersionCacheTargetsFile)"
    Condition="Exists('$(TeronisMSBuildPackagingGitVersionCacheTargetsFile)') 
      And '$(IsGitVersionCacheRelated)' != 'true'
      And '$(DisableGitVersionCache)' != 'true'" />
  
  <ItemGroup>
    <Compile Remove="$(MSBuildThisFileDirectory)/Nullable.cs" Condition="'$(Nullable)' != 'enable' Or '$(DisallowNullableAttributes)' == 'true'" />
  </ItemGroup>

  <PropertyGroup>
    <PackageDescription Condition="'$(PackageDescription)' == '' And '$(Description)' != ''">$(Description)</PackageDescription>
  </PropertyGroup>

  <PropertyGroup>
    <!-- 
      We get these errors, because the .NET Core 2.0 implementation/interfaces are not decorated with nullability attributes and somehow the analyzer/compiler just checks nullability
      because of pure existence of such attribtues. 
      -->
    <!-- Warning	CS8767	Nullability of reference types in type of parameter '..' of '..' doesn't match implicitly implemented member '..' (possibly because of nullability attributes). -->
    <!-- Warning	CS8769	Nullability of reference types in type of parameter '..' doesn't match implemented member '..' (possibly because of nullability attributes). -->
    <NoWarn Condition="'$(TargetFramework)' == 'netstandard2.0'">$(NoWarn);8769;8767</NoWarn>
  </PropertyGroup>

  <!-- <ItemGroup>
    <ProjectReference Include="$(MSBuildThisFileDirectory)src\MSBuild\Packaging\PackExecutable\0\src\Teronis.MSBuild.Packaging.PackExecutable.csproj" Condition="'$(DisablePackExecutableSourceInclude)' != 'true'">
      <ReferenceOutputAssembly>false</ReferenceOutputAssembly>
      <SkipGetTargetFrameworkProperties>true</SkipGetTargetFrameworkProperties>
      <GlobalPropertiesToRemove>TargetFramework;TargetFrameworks</GlobalPropertiesToRemove>
      <BuildProjectReferences>false</BuildProjectReferences>
    </ProjectReference>
  </ItemGroup> -->

  <ItemGroup>

    <PackageReference Include="Microsoft.SourceLink.GitHub" Version="1.0.0" PrivateAssets="All" Conditions="'$(DisableGitVersionCache)' != 'true' And $(IsPackable)" />

    <!-- <ProjectReference Include="$(MSBuildThisFileDirectory)src\MSBuild\Packaging\GitVersionCache\0\ref\PackagePublish\PackagePublish.MSBuild.Packaging.GitVersionCache.csproj"
      Condition="'$(IsGitVersionCacheRelated)' != 'true'
        And '$(DisableGitVersionCache)' != 'true' 
        And '$(IsPackable)' == 'true'" /> -->

    <ProjectReference Include="$(MSBuildThisFileDirectory)src\MSBuild\Packaging\GitVersionCache\0\ref\GitVersionCache\GitVersionCache.MSBuild.Packaging.GitVersionCache.csproj"
      Condition="'$(IsGitVersionCacheRelated)' != 'true'
        And '$(DisableGitVersionCache)' != 'true' 
        And '$(IsPackable)' == 'true'">
        <ReferenceOutputAssembly>false</ReferenceOutputAssembly>
        <SkipGetTargetFrameworkProperties>true</SkipGetTargetFrameworkProperties>
        <SetTargetFramework>TargetFramework=netstandard2.0</SetTargetFramework>
        <Private>false</Private>
      </ProjectReference>
    
  </ItemGroup>

  <ItemGroup>
    <!-- <ProjectReference Include="$(MSBuildThisFileDirectory)src\ModuleInitializer\AssemblyLoader\0.Executable\ref\ExecutablePublish\ExecutablePublish.ModuleInitializer.AssemblyLoader.Executable.csproj"
      Condition="'$(IsDependencyPublishProject)' == 'true' And '$(MSBuildProjectFile)' != 'ExecutablePublish.ModuleInitializer.AssemblyLoader.Executable.csproj'"/> -->

      <!-- <_ProjectReference Include="@(ProjectReference)" Condition="'%(Identity)' == 'Teronis.ModuleInitializer.AssemblyLoader.MSBuild'" /> -->

      <!-- <ProjectReference Include="$(MSBuildThisFileDirectory)src\ModuleInitializer\AssemblyLoader\0.Executable\ref\ExecutablePublish\ExecutablePublish.ModuleInitializer.AssemblyLoader.Executable.csproj"
                        Condition="'%(ProjectReference.Filename)' == 'Teronis.ModuleInitializer.AssemblyLoader.MSBuild'" /> -->
  </ItemGroup>

  <!-- <PropertyGroup>
    <_TeronisMSBuildPackagingGitVersionCachePropsFile>$(TeronisMSBuildPackagingGitVersionCachePropsFileTemplate.Replace('(Configuration)','$(Configuration)'))</_TeronisMSBuildPackagingGitVersionCachePropsFile>
    <_TeronisMSBuildPackagingGitVersionCacheTargetsFile>$(TeronisMSBuildPackagingGitVersionCacheTargetsFileTemplate.Replace('(Configuration)','$(Configuration)'))</_TeronisMSBuildPackagingGitVersionCacheTargetsFile>
  </PropertyGroup> -->

  <ItemGroup>

    <_ProjectReferences Include="@(ProjectReference)">
      <!-- Prevent PackagePublish.*-projects from being tracked in *.nuspec files. -->
      <IsPackagePublishProject>false</IsPackagePublishProject>

      <IsPackagePublishProject Condition="$([System.String]::Copy('%(Filename)').Contains('PackagePublish.'))
        Or $([System.String]::Copy('%(Filename)').Contains('DependencyPublish.'))">true</IsPackagePublishProject>

      <ReferenceOutputAssembly Condition="'%(IsPackagePublishProject)' == 'true'">false</ReferenceOutputAssembly>
      <SkipGetTargetFrameworkProperties Condition="'%(IsPackagePublishProject)' == 'true'">true</SkipGetTargetFrameworkProperties>
      <GlobalPropertiesToRemove Condition="'%(IsPackagePublishProject)' == 'true'">TargetFramework</GlobalPropertiesToRemove>
      <BuildProjectReferences Condition="'%(IsPackagePublishProject)' == 'true'">false</BuildProjectReferences>

      <!-- <AdditionalProperties Condition="'%(Filename)' == 'Teronis.NetStandard.Core'">%(AdditionalProperties);TargetFramework=netstandard2.0</AdditionalProperties> -->
      <!-- <AdditionalProperties >%(AdditionalProperties);TargetFramework=$(TargetFramework)</AdditionalProperties> -->
      <!-- <AdditionalProperties Condition="'%(Filename)' == 'Teronis.NetStandard.Core'">TargetFramework=$(TargetFramework)</AdditionalProperties> -->
      <!-- <Properties>%(Properties);DisallowNullableAttributes=true</Properties> -->
      <!-- <AdditionalProperties Condition="'%(Filename)' == 'Teronis.NetStandard.Core'">%(AdditionalProperties);TargetFramework=$(TargetFramework)</AdditionalProperties> -->
      <!-- <SetTargetFramework Condition="'%(Filename)' == 'Teronis.NetStandard.Core'">TargetFramework=$(TargetFramework)</SetTargetFramework> -->
      <SetTargetFramework Condition="'%(Filename)' == 'Teronis.NetStandard.Core' 
        Or '%(Filename)' == 'Teronis.NetStandard.Collections'">TargetFramework=$(TargetFramework)</SetTargetFramework>
    </_ProjectReferences>

    <ProjectReference Remove="@(ProjectReference)" />
    <ProjectReference Include="@(_ProjectReferences)" />

  </ItemGroup>

  <Target Name="_DirectoryBuildBeforeClean" BeforeTargets="BeforeClean">
    <PropertyGroup>
      <DisableGitVersionCache>true</DisableGitVersionCache>
    </PropertyGroup>
  </Target>

  <Target Name="_DirectoryBuildAfterClean" BeforeTargets="AfterClean">
    <PropertyGroup>
      <DisableGitVersionCache>false</DisableGitVersionCache>
    </PropertyGroup>
  </Target>

  <Target Name="AfterUnpackAsExecutablePackedProject" BeforeTargets="PackSourceWhenPackingPublishTypedProject">
    <PropertyGroup>
      <DisableGitVersionCache>true</DisableGitVersionCache>
    </PropertyGroup>
  </Target>

  <Target Name="AfterUnpackAsExecutablePackedProject" AfterTargets="PackSourceWhenPackingPublishTypedProject">
    <PropertyGroup>
      <DisableGitVersionCache>false</DisableGitVersionCache>
    </PropertyGroup>
  </Target>

  <!--
  ============================================================
  GetVersionCacheWhenGettingPackageTypedExecutableSourceProperties
  
  Invokes GetVersionCache, so its evaluation is regarded when
  packing executable source project.
  ============================================================
  -->
  <Target Name="GetVersionCacheWhenGettingPackageTypedExecutableSourceProperties" DependsOnTargets="GetVersionCache" Condition="'$(ParentIsExecutablePackageTyped)' == 'true'" />

</Project>
