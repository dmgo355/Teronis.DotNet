<?xml version="1.0" encoding="utf-8" ?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <Import Condition="'$(IsMSBuildFileImported)' != 'true'" Project="$([MSBuild]::GetPathOfFileAbove(.msbuild))" />
  <Import Condition="'$(IsTeronisDotNetCorePropsFileImported)' != 'true'" Project="$(RootCorePropsPath)" />
  <Import Project="$(TeronisMSBuildPackagingProjectBuildInPackageTargetsFile)" />
  <Import Project="$(TeronisMSBuildPackagingPackTargetsFile)" Condition="Exists($(TeronisMSBuildPackagingPackTargetsFile))" />

  <!-- GIT_VERSION_CACHE: Replacement for GitVersion because it had some lock file issues. -->

  <Import Project="$(TeronisMSBuildPackagingGitVersionCachePropsFile)" 
    Condition="Exists('$(TeronisMSBuildPackagingGitVersionCachePropsFile)')
      And '$(IsGitVersionCacheRelated)' != 'true'
      And '$(DisableGitVersionCache)' != 'true'" />

  <!-- This gets overriden if below import exists. -->
  <Target Name="GetVersionCache" />

  <Import Project="$(TeronisMSBuildPackagingGitVersionCacheTargetsFile)"
    Condition="Exists('$(TeronisMSBuildPackagingGitVersionCacheTargetsFile)') 
      And '$(IsGitVersionCacheRelated)' != 'true'
      And '$(DisableGitVersionCache)' != 'true'" />

  <!-- <ItemGroup>
    <PackageReference Include="Nullable" Version="1.3.0"
      Condition="'$(NullableWorkaround)' != 'disable' And '$(Nullable)' == 'enable' And ('$(TargetFramework)' == 'netstandard2.0'
        Or '$(TargetFramework)' == 'netstandard2.1'
        Or '$(TargetFramework)' == 'netstandard2.2')">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
  </ItemGroup> -->

  <PropertyGroup>
    <PackageDescription Condition="'$(PackageDescription)' == '' And '$(Description)' != ''">$(Description)</PackageDescription>
  </PropertyGroup>

  <PropertyGroup>
    <!-- 
      We get these errors, because the .NET Core 2.0 implementation/interfaces are not decorated with nullability attributes and somehow the analyzer/compiler just checks nullability
      because of pure existence of such attribtues. 
      -->
    <!-- Warning	CS8767	Nullability of reference types in type of parameter '..' of '..' doesn't match implicitly implemented member '..' (possibly because of nullability attributes). -->
    <!-- Warning	CS8769	Nullability of reference types in type of parameter '..' doesn't match implemented member '..' (possibly because of nullability attributes). -->
    <!-- Warning  CS0436 -->
    <NoWarn Condition="'$(TargetFramework)' == 'netstandard2.0'">$(NoWarn);CS8767;CS8769;0436</NoWarn>
  </PropertyGroup>

  <!-- LINKS SOURCE CODE TO CODE UPLOADED TO GITHUB -->

  <ItemGroup>

    <PackageReference Include="Microsoft.SourceLink.GitHub" Version="1.0.0"
      PrivateAssets="All"
      Conditions="'$(DisableGitVersionCache)' != 'true' And $(IsPackable)" />
    
  </ItemGroup>

  <ItemGroup>

    <_ProjectReferences Include="@(ProjectReference)">

      <!-- Prevent *Publish.*-projects from being tracked in *.nuspec files. -->
      <IsPublishProject>false</IsPublishProject>

      <IsPublishProject Condition="$([System.String]::Copy('%(Filename)').Contains('~ExecutablePublish'))
        Or $([System.String]::Copy('%(Filename)').Contains('~DependencyPublish'))">true</IsPublishProject>

      <ReferenceOutputAssembly Condition="'%(IsPublishProject)' == 'true'">false</ReferenceOutputAssembly>
      <SkipGetTargetFrameworkProperties Condition="'%(IsPublishProject)' == 'true'">true</SkipGetTargetFrameworkProperties>
      <GlobalPropertiesToRemove Condition="'%(IsPublishProject)' == 'true'">TargetFramework</GlobalPropertiesToRemove>
      <BuildProjectReferences Condition="'%(IsPublishProject)' == 'true'">false</BuildProjectReferences>

      <SetTargetFramework Condition="'%(SetTargetFramework)' == '' And (
        '%(Filename)' == 'Teronis.NetStandard.Core'
        Or '%(Filename)' == 'Teronis.NetStandard.Collections'
        Or '%(Filename)' == 'Teronis.NetStandard.Collections.Algorithms')">TargetFramework=$(TargetFramework)</SetTargetFramework>

    </_ProjectReferences>

    <ProjectReference Remove="@(ProjectReference)" />
    <ProjectReference Include="@(_ProjectReferences)" />

  </ItemGroup>

  <Target Name="_DirectoryBuildBeforeClean" BeforeTargets="BeforeClean">
    <PropertyGroup>
      <DisableGitVersionCache>true</DisableGitVersionCache>
    </PropertyGroup>
  </Target>

  <Target Name="_DirectoryBuildAfterClean" BeforeTargets="AfterClean">
    <PropertyGroup>
      <DisableGitVersionCache>false</DisableGitVersionCache>
    </PropertyGroup>
  </Target>

  <Target Name="AfterUnpackAsExecutablePackedProject" BeforeTargets="PackSourceWhenPackingPublishTypedProject">
    <PropertyGroup>
      <DisableGitVersionCache>true</DisableGitVersionCache>
    </PropertyGroup>
  </Target>

  <Target Name="AfterUnpackAsExecutablePackedProject" AfterTargets="PackSourceWhenPackingPublishTypedProject">
    <PropertyGroup>
      <DisableGitVersionCache>false</DisableGitVersionCache>
    </PropertyGroup>
  </Target>

  <!--
  ================================================================
  GetVersionCacheWhenGettingPackageTypedExecutableSourceProperties
  
  Invokes GetVersionCache, so its evaluation is regarded when
  packing executable source project.
  ================================================================
  -->
  <Target Name="GetVersionCacheWhenGettingPackageTypedExecutableSourceProperties" DependsOnTargets="GetVersionCache" Condition="'$(ParentIsExecutablePackageTyped)' == 'true'" />

</Project>
